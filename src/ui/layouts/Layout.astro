---
interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;

import "@/styles/globals.css";
import Header from "../components/Header.astro";
import { ViewTransitions } from "astro:transitions";
---

<!doctype html>
<html lang="en">
  <head>
    <!-- @ts-expect-error -->
    <ViewTransitions handleForms />
    <meta charset="UTF-8" />
    <meta name="referer" content="same-origin" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <Header />
    <slot />
    <!-- TODO: fix mode changing on view transitions -->
    <script is:inline>
      const getThemePreference = () => {
        const theme = localStorage.getItem("theme");
        if (typeof localStorage !== "undefined" && theme) {
          return theme;
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };
      const isDark = getThemePreference() === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");

      if (typeof localStorage !== "undefined") {
        new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
        }).observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["class"],
        });
      }
    </script>
  </body>
</html>
